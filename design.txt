1. Follow API: WS server that exposes WS API to follow a user
2. Tweet API: WS server that exposes WS API to post a tweet
3. Get Tweets for User ID API
4. Notification API: Lists tweets. Uses a channel to get the tweets.

# 1, 2, 3 as a single service - WS Post API
# 4 as a seperate service - Connects to API 3. If client receieves a message, push to to the channel. In the other goroutine, consume this channel.

Create a file where you export global Variables that are actually request names. 
These request names or variables must be mapped to handlers.
These handlers take in the decoded WS request obtained by Unmarshalling the JSON data.
When we unmarshall we just take a desired part of the API json request

Notifier service, 
Send to clients (all), 
Send to subscribed clients,
rn send followship notfication,
later, add logic to give posts: 

posts have a timeID, tweetID, content ... 
add to map with key as timeID .. iterate map ..
for that user, iterate all followers.. send post to them.. 

get post : 

for posts in post_map (as per time):
if that user is followed by currentuser (it = friend[post.user], if it[current_user] is true) 

API Handler adds data in channel, decode.go
Broadcast has go routine that sends to all clients decode.go
all clients are in an array declared in data.go
channels are in request.go

connect to server, send requests from diff clients and observe